<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - Default Point Spot Style -->
  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/animation__3__user_defaultpoint0.png"
         visible="false"
         onhover="onhoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"

         height="25"
         width="25"
         />

  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();



  </action>



  <!-- unsupported kind of display : PointMap -->


  <!-- unsupported kind of display : PointMap -->


<!-- ********** -->
<!-- Double Click -->
<!-- id : doubleclick -->
<!-- ********** -->

  <plugin name="doubleclick" url.flash="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.swf" url.html5="%FIRSTXML%/graphics/doubleclick/dctouch.min.js" keep="true" ondblclick="doubleclick_ondoubleclick();"/>
  <action name="doubleclick_ondoubleclick">switchFullscreen();


  </action>

<!-- ********** -->
<!-- Context menu -->
<!-- id : contextmenu -->
<!-- ********** -->
  <contextmenu fullscreen="false" versioninfo="false" touch="true">
    <item name="normal"        onclick="setViewNormal();
" separator="true"/>
    <item name="architectural" onclick="setViewArchitectural();
"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();
"/>
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" 
    onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" 
    onxmlcomplete="updateContextMenu" 
    changetourlanguage="updateContextMenu" 
    />
  <events name="contextmenuvrevents" keep="true" 
    onvravailable="updateContextMenu();" onvrunavailable="updateContextMenu();"
    devices="html5"
    />
  <action name="updateContextMenu">
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    set(sceneisfull360, false);
    if(scene[get(xml.scene)].full360,
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
    );
    if (sceneisfull360 AND (device.webgl OR device.flash),
      set(contextmenu.item[littleplanet].visible, true);
      getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    ,
      set(contextmenu.item[littleplanet].visible, false);
    );
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
  </action>

<!-- ********** -->
<!-- Floor plan -->
<!-- id : floorPlan -->
<!-- ********** -->

	<ptplugin name="floorPlan" engine="KolorFloorPlan">
		<settings>
			<option name="background_color" value="4b4b4b" type="string" />
			<option name="background_lighter_color" value="5a5a5a" type="string" />
			<option name="background_darker_color" value="3e3e3e" type="string" />
			<option name="background_alpha" value="0.7000076295109483" type="float" />
			<option name="text_color" value="000000" type="string" />
			<option name="resize" value="true" type="bool" />
			<option name="fp_selector" value="multiple" type="string" />
			<option name="fp_selector_label" value="floorPlanmenu_label" type="string" />
			<option name="display_title" value="true" type="bool" />
			<option name="title" value="panogroup11_floor_title" type="string" />
			<option name="title_font" value="Acrom" type="string" />
			<option name="title_size" value="11" type="int" />
			<option name="title_weight" value="bold" type="string" />
			<option name="title_decoration" value="normal" type="string" />
			<option name="title_color" value="ededed" type="string" />
			<option name="display_orientation" value="false" type="bool" />
			<option name="display_radar" value="false" type="bool" />
			<option name="selected_effect" value="pulsate" type="string" />
			<option name="close_on_click" value="false" type="bool" />
			<option name="position" value="topright" type="string" />
			<option name="zorder" value="3" type="int" />
			<option name="use_i18n" value="true" type="bool" />
		</settings>
		
		<floorplanItems selectedItem="" selectedSpot="" selectedSpotScene="" selectedSpotHeading="" selectedSpotFov="">
			
			
							<floorplanItem 
								name="fpitempanogroup11" 
								width="2450" 
								height="2450" 
								groupName="panogroup11" 
								url="floorplan/_1077108210901086_10721090_1_1101109010721078_panogroup11.png" 
								title="panogroup11_floor_title"
								heading="0">
										<spot name="spotmap5505" posX="0.735980988" posY="0.551401973" heading="91" desc="spotmap5505_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano10" jsClick="spotmap5505ActionSpotFloorPlan">
											<icon url="spots/указатель2_user_defaultmap2.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
							</floorplanItem>
							<floorplanItem 
								name="fpitempanogroup84" 
								width="2450" 
								height="2450" 
								groupName="panogroup84" 
								url="floorplan/_1077108210901086_10721090_2_1101109010721078_panogroup84.png" 
								title="panogroup84_floor_title"
								heading="0">
										<spot name="spotmap5506" posX="0.834111989" posY="0.665888011" heading="95" desc="spotmap5506_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano80" jsClick="spotmap5506ActionSpotFloorPlan">
											<icon url="spots/указатель2_user_defaultmap2.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
										<spot name="spotmap5507" posX="0.422897011" posY="0.257009" heading="112" desc="spotmap5507_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano13265" jsClick="spotmap5507ActionSpotFloorPlan">
											<icon url="spots/указатель2_user_defaultmap2.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
							</floorplanItem>
							<floorplanItem 
								name="fpitempanogroup56" 
								width="2450" 
								height="2450" 
								groupName="panogroup56" 
								url="floorplan/_109510771073108510991081_1_1101109010721078_panogroup56.png" 
								title="panogroup56_floor_title"
								heading="0">
										<spot name="spotmap5518" posX="0.126167998" posY="0.0934579" heading="141" desc="spotmap5518_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano40" jsClick="spotmap5518ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
							</floorplanItem>
							<floorplanItem 
								name="fpitempanogroup933" 
								width="2450" 
								height="2450" 
								groupName="panogroup933" 
								url="floorplan/_109510771073108510991081_2_1101109010721078_panogroup933.png" 
								title="panogroup933_floor_title"
								heading="0">
										<spot name="spotmap5530" posX="0.0864486024" posY="0.747663975" heading="121" desc="spotmap5530_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano930" jsClick="spotmap5530ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
										<spot name="spotmap5531" posX="0.67523402" posY="0.607477009" heading="112" desc="spotmap5531_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano13265" jsClick="spotmap5531ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
										<spot name="spotmap5532" posX="0.820092976" posY="0.0537382998" heading="131" desc="spotmap5532_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano250" jsClick="spotmap5532ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
										<spot name="spotmap5533" posX="0.121495001" posY="0.067757003" heading="-8" desc="spotmap5533_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano923" jsClick="spotmap5533ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
							</floorplanItem>
							<floorplanItem 
								name="fpitempanogroup843" 
								width="2450" 
								height="2450" 
								groupName="panogroup843" 
								url="floorplan/_109510771073108510991081_3_1101109010721078_panogroup843.png" 
								title="panogroup843_floor_title"
								heading="0">
										<spot name="spotmap5508" posX="0.0841121972" posY="0.773364007" heading="34" desc="spotmap5508_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano810" jsClick="spotmap5508ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
										<spot name="spotmap5509" posX="0.794393003" posY="0.0560748018" heading="63" desc="spotmap5509_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano834" jsClick="spotmap5509ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
										<spot name="spotmap5510" posX="0.112149999" posY="0.0934579" heading="56" desc="spotmap5510_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano825" jsClick="spotmap5510ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
							</floorplanItem>
							<floorplanItem 
								name="fpitempanogroup1253" 
								width="2450" 
								height="2450" 
								groupName="panogroup1253" 
								url="floorplan/_109510771073108510991081_4_1101109010721078_panogroup1253.png" 
								title="panogroup1253_floor_title"
								heading="0">
										<spot name="spotmap5527" posX="0.0981307998" posY="0.771027982" heading="30" desc="spotmap5527_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano1224" jsClick="spotmap5527ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
										<spot name="spotmap5528" posX="0.116821997" posY="0.0630841032" heading="51" desc="spotmap5528_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano1233" jsClick="spotmap5528ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
										<spot name="spotmap5529" posX="0.808411002" posY="0.0607477017" heading="60" desc="spotmap5529_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano1244" jsClick="spotmap5529ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
							</floorplanItem>
							<floorplanItem 
								name="fpitempanogroup1739" 
								width="2450" 
								height="2450" 
								groupName="panogroup1739" 
								url="floorplan/_109510771073108510991081_5_1101109010721078_panogroup1739.png" 
								title="panogroup1739_floor_title"
								heading="0">
										<spot name="spotmap5526" posX="0.126167998" posY="0.0911215022" heading="7" desc="spotmap5526_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano1336" jsClick="spotmap5526ActionSpotFloorPlan">
											<icon url="spots/указатель3_user_defaultmap0.png" iconWidth="23" iconHeight="23" iconAnchor="center" />
										</spot>
							</floorplanItem>
		</floorplanItems>
	</ptplugin>
	
	<action name="kolorFloorplanJsReady_floorPlan">
		set(ptplugin[floorPlan].jsready, true);
		
		ifnot(ptplugin[floorPlan].floorplanItems[0].selectedSpot == "",
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotFov, get(view.hfov));
			js(invokePluginFunction(floorPlan, setKolorFloorPlanSelectedSpotOptions, get(xml.scene), get(view.hlookat), get(view.hfov)));
		);
	</action>
	
	
	
					<!-- floorplan panogroup11 spots counter : 1 -->
						<action name="spotmap5505ActionSpotFloorPlan">
          mainloadscene(pano10);lookat(179.550000, -10.650000, 90.000000);

</action>
					<!-- floorplan panogroup84 spots counter : 2 -->
						<action name="spotmap5506ActionSpotFloorPlan">
          mainloadscene(pano80);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap5507ActionSpotFloorPlan">
          mainloadscene(pano13265);lookat(-179.100000, -0.450000, 90.000000);

</action>
					<!-- floorplan panogroup56 spots counter : 1 -->
						<action name="spotmap5518ActionSpotFloorPlan">
          mainloadscene(pano40);lookat(4.050000, -2.250000, 99.000000);

</action>
					<!-- floorplan panogroup933 spots counter : 4 -->
						<action name="spotmap5530ActionSpotFloorPlan">
          mainloadscene(pano930);lookat(65.700000, 4.050000, 90.000000);

</action>
						<action name="spotmap5531ActionSpotFloorPlan">
          mainloadscene(pano13265);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap5532ActionSpotFloorPlan">
          mainloadscene(pano250);lookat(98.100000, 3.150000, 90.000000);

</action>
						<action name="spotmap5533ActionSpotFloorPlan">
          mainloadscene(pano923);lookat(0.000000, 0.000000, 90.000000);

</action>
					<!-- floorplan panogroup843 spots counter : 3 -->
						<action name="spotmap5508ActionSpotFloorPlan">
          mainloadscene(pano810);lookat(-66.150000, 2.250000, 90.000000);

</action>
						<action name="spotmap5509ActionSpotFloorPlan">
          mainloadscene(pano834);lookat(-72.900000, -0.450000, 90.000000);

</action>
						<action name="spotmap5510ActionSpotFloorPlan">
          mainloadscene(pano825);lookat(-96.750000, 1.800000, 111.145000);

</action>
					<!-- floorplan panogroup1253 spots counter : 3 -->
						<action name="spotmap5527ActionSpotFloorPlan">
          mainloadscene(pano1224);lookat(-72.900000, 0.000000, 90.000000);

</action>
						<action name="spotmap5528ActionSpotFloorPlan">
          mainloadscene(pano1233);lookat(-80.550000, 1.350000, 90.000000);

</action>
						<action name="spotmap5529ActionSpotFloorPlan">
          mainloadscene(pano1244);lookat(-82.800000, 3.600000, 90.000000);

</action>
					<!-- floorplan panogroup1739 spots counter : 1 -->
						<action name="spotmap5526ActionSpotFloorPlan">
          mainloadscene(pano1336);lookat(168.300000, 3.600000, 90.000000);

</action>
	
	
	<events name="floorPlanEvents" 
	onxmlcomplete="ifnot(floorPlanFloorPlanLoaded,set(tour_displayfloorplan,true););floorPlanActivateDefaultSpot();" 
	onhidetourfloorplan="delayedcall(0.3,floorPlanCloseTourFloorPlan(););" 
	onshowtourfloorplan="if(tour_displayfloorplan,floorPlanOpenTourFloorPlan(););" 
	onTourStart="set(loadedState_floorPlanArea, get(tour_displaycontrols));floorPlanOpenTourFloorPlan();"
	changetourlanguage="floorPlanChangeLanguage();"
	keep="true" />
	
	<action name="floorPlanChangeLanguage">
		if(ptplugin[floorPlan].jsready,
			stopdelayedcall(delay_floorPlan);
			js(invokePluginFunction(floorPlan, changeLanguage));
			js(invokePluginFunction(floorPlanArea, changeLanguage, false));
		,
			delayedcall(delay_floorPlan, 0.1, floorPlanChangeLanguage(););
		);
	</action>
	
	
	<krpano floorPlanFloorPlanLoaded="false" />
	
	<action name="floorPlanHideTourFloorPlan">
		hideKolorArea_floorPlanArea(false);
	</action>
	
	<action name="floorPlanCloseTourFloorPlan">
		closeKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanShowTourFloorPlan">
		if(ptplugin[floorPlanArea].isOpen === null,
			openKolorArea_floorPlanArea();
		,
			showKolorArea_floorPlanArea(false);
		);
	</action>
	
	<action name="floorPlanOpenTourFloorPlan">
		openKolorArea_floorPlanArea();
	</action>
	
	
	<action name="floorPlanActivateSpot">
		
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, %1);
		set(ptplugin[floorPlan].floorplanItems[0].selectedItem, %2);
		
		if(%1 !== "",
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotScene, get(xml.scene));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotHeading, get(view.hlookat));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotFov, get(view.hfov));
		);
		
		js(invokePluginFunction(floorPlan, selectSpot, %1, %2, %3));

	</action>
	
	<action name="floorPlanDeactivateSpot">
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, "");
		
		js(invokePluginFunction(floorPlan, unselectSpot));
	</action>
	
	<action name="floorPlanActivateDefaultSpot">
		set(floorPlanFloorPlanLoaded, true);
		
		set(floorPlanSpotFound, "");
		set(floorPlanSpotScene, "");
		set(floorPlanItemFound, "");
		set(floorPlanItemSearch, true);
		set(floorPlanSpotSearch, true);
		set(floorPlanSpotSearchActivated, true);
		set(floorPlanSpotSearchContinue, true);
		
		
		set(defaultfloorplaniteminc_wait,50);
		for(set(defaultfloorplaniteminc,0), defaultfloorplaniteminc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem.count , inc(defaultfloorplaniteminc),
			if(defaultfloorplaniteminc_wait == defaultfloorplaniteminc,
				add(defaultfloorplaniteminc_wait,50);
				wait(0);
			);
			if(floorPlanSpotSearchActivated == true,
				
				if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].groupName == scene[get(xml.scene)].group,
					set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(floorPlanItemSearch, false);
					set(floorPlanSpotSearch, true);
				,
					set(floorPlanSpotSearch, false);
					
					if(floorPlanItemFound == "",
						set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					);
				);
			);
			if(floorPlanSpotSearch == true,
				set(defaultspotinc_wait,50);
				for(set(defaultspotinc,0), defaultspotinc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot.count , inc(defaultspotinc),
					if(defaultspotinc_wait == defaultspotinc,
						add(defaultspotinc_wait,50);
						wait(0);
					);
					if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].isScene == true,
					
						if(floorPlanSpotSearchContinue == true,
							if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene == xml.scene,
								set(floorPlanSpotFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].name));
								set(floorPlanSpotScene, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene));
								set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
								if(floorPlanItemSearch == false,
									set(floorPlanSpotSearchContinue, false);
									set(floorPlanSpotSearchActivated, false);
									set(floorPlanSpotSearch, false);
								);
							);
						);
					);
					
				);
			);
		);
		
		if(floorPlanSpotFound == "",
			
			
			floorPlanDeactivateSpot();
			
			
			set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(floorPlanItemFound));
			
			
			ifnot(ptplugin[floorPlan].floorplanItems[0].selectedItem == "",
				floorPlanActivateSpot("", get(ptplugin[floorPlan].floorplanItems[0].selectedItem), "");
			);
		,
			
			floorPlanActivateSpot(get(floorPlanSpotFound), get(ptplugin[floorPlan].floorplanItems[0].selectedItem), get(floorPlanSpotScene));
		);
	</action>
	
	<action name="floorPlanChangeTitle">
		js(invokePluginFunction(floorPlan, changeTitle, %1));
	</action>
	
	<ptplugin name="floorPlanArea" engine="kolorArea">
	<settings>
		<option name="position" value="topright" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="display_title" value="true" type="bool" />
		<option name="title" value="panogroup11_floor_title" type="string" />
		<option name="title_font" value="Acrom" type="string" />
		<option name="title_size" value="11" type="int" />
		<option name="title_weight" value="bold" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="ededed" type="string" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="floorPlandisplay_close_text" type="string" />

		<option name="background_color" value="4b4b4b" type="string" />
		<option name="background_alpha" value="0.7000076295109483" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="padding" value="15" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_border_alpha" value="1" type="float" />
		<option name="area_width" value="300" type="int" />
		<option name="area_height" value="300" type="int" />
		<option name="area_width_unit" value="pixel" type="string" />
		<option name="area_height_unit" value="pixel" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="close_on_click" value="false" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorFloorPlan('floorPlan', 'floorPlanArea_floorplanDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_floorPlanArea')" type="string" />
		<option name="zorder" value="3" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady_floorPlanArea">
		set(ptplugin[floorPlanArea].jsready, true);

		inc(tour_autorotation_openatstartplugin);
		set(ptplugin[floorPlanArea].autorotateBlocked, true);

	</action>
	
	<action name="openKolorArea_floorPlanArea">
		ifnot(ptplugin[floorPlanArea].isOpen,
			if(ptplugin[floorPlanArea].doNotDeleteMe,
				set(ptplugin[floorPlanArea].currentCall, false);
				set(ptplugin[floorPlanArea].doNotDeleteMe, false);
			set(ptplugin[floorPlanArea].isOpen, true);
			pauseautorotation(forceplugin);

			js(showKolorArea(floorPlanArea, &lt;div id="floorPlanArea_floorplanDIV"&gt;&lt;/div&gt;));
			,
				set(ptplugin[floorPlanArea].currentCall, true);
				set(ptplugin[floorPlanArea].doNotDeleteMe, true);
				events.dispatch(onremovedisplayedobject);
				delayedcall(0.3,openKolorArea_floorPlanArea(););
			);
		);
	</action>
	
	<action name="closeKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			if(ptplugin[floorPlanArea].doNotDeleteMe,
				set(ptplugin[floorPlanArea].doNotDeleteMe, false);
			,
			js(invokePluginFunction(floorPlanArea, closeKolorArea));
			);
		);
	</action>
	
	<action name="toggleKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea_floorPlanArea();
		,
			openKolorArea_floorPlanArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback_floorPlanArea">
		set(ptplugin[floorPlanArea].doNotDeleteMe, false);
		if(ptplugin[floorPlanArea].isOpen,resumeautorotation(forceplugin);

			if(ptplugin[floorPlanArea].autorotateBlocked,if(tour_autorotation_openatstartplugin GT 0,dec(tour_autorotation_openatstartplugin);set(ptplugin[floorPlanArea].autorotateBlocked,false);););
		);
		set(ptplugin[floorPlanArea].isOpen, false);hideFloorplan();

	</action>
	
	<action name="changeTitleKolorArea_floorPlanArea">
		js(invokePluginFunction(floorPlanArea, changeTitle, %1));
	</action>
	
	<action name="showKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].doNotDeleteMe,
			set(ptplugin[floorPlanArea].currentCall, false);
			set(ptplugin[floorPlanArea].doNotDeleteMe, false);
		set(ptplugin[floorPlanArea].isOpen, true);
		pauseautorotation(forceplugin);

		js(invokePluginFunction(floorPlanArea, showKolorArea, %1));
		,
			set(ptplugin[floorPlanArea].currentCall, true);
			set(ptplugin[floorPlanArea].doNotDeleteMe, true);
			events.dispatch(onremovedisplayedobject);
			delayedcall(0.3,showKolorArea_floorPlanArea(););
		);
	</action>
		
	<action name="hideKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].doNotDeleteMe,
			set(ptplugin[floorPlanArea].doNotDeleteMe, false);
		,
		resumeautorotation(forceplugin);

		if(ptplugin[floorPlanArea].autorotateBlocked,if(tour_autorotation_openatstartplugin GT 0,dec(tour_autorotation_openatstartplugin);set(ptplugin[floorPlanArea].autorotateBlocked,false);););
		set(ptplugin[floorPlanArea].isOpen, false);
		js(invokePluginFunction(floorPlanArea, hideKolorArea, %1));
		);
	</action>
	
	<events name="kolorAreaEvents_floorPlanArea" 
		keep="true"
		hidetourcontrols="if(loadedState_floorPlanArea,if(ptplugin[floorPlanArea].isOpen,set(restore_floorPlanArea, true);hideKolorArea_floorPlanArea(false);,set(restore_floorPlanArea, false);););"
		showtourcontrols="if(tour_displayfloorplan,if(restore_floorPlanArea,showKolorArea_floorPlanArea(false);););set(loadedState_floorPlanArea, get(tour_displaycontrols));"
		onremovedisplayedobject="ifnot(ptplugin[floorPlanArea].currentCall,if(ptplugin[floorPlanArea].isOpen,hideFloorplan();
););"
	/>
	
<!-- ********** -->
<!-- Logo -->
<!-- id : logo -->
<!-- ********** -->

  <layer align="bottomleft"
         x="10"
         y="10"
         zorder="4"
         name="logo"
         keep="true"
         visible="false"
         capture="false"

         url="%FIRSTXML%/graphics/logo/nsu_logo_russian_green.png" 
         handcursor="false"

         height="90"
         width="270"

         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    hidetourcontrols="hidelogo();"
    showtourcontrols="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
    if (tour_displaycontrols,
      set(layer[logo].visible, true);
    );
  </action>




<!-- ********** -->
<!-- Hide floorplan -->
<!-- id : togglebutton -->
<!-- ********** -->



  <layer name="togglebutton"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton/_10831072108510861085.png" 
         align="bottom"
         x="84"
         y="10"
         zorder="5"
         tooltip=""
         onhover="togglebuttonOnHover"
         state="true"
         onclick="togglebuttonOnClick"
         alpha="0.7"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         height="32"
         width="32"
         visible="false"
         />

  <action name="togglebuttonOnHover">
    if (state,
      set(tooltip, togglebuttonfirsttooltip);
     ,
      set(tooltip, togglebuttonsecondtooltip);
    );
    if (tooltip != "", showTooltip('plugin',togglebuttonTooltipStyle););
  </action>
  <action name="togglebuttonOnClick">
    if (state,
      set(state, false);hideFloorplan();


      set(url,%FIRSTXML%/graphics/togglebutton/_108310721085108610921092.png);
     ,
      set(state, true);showFloorplan();


      set(url,%FIRSTXML%/graphics/togglebutton/_10831072108510861085.png);
    );
  </action>

  <events name="togglebuttonevents" 
    onTourStart="showtogglebutton();"
    hidetourcontrols="hidetogglebutton();" 
    showtourcontrols="showtogglebutton();" 
    keep="true" />
  <action name="hidetogglebutton">set(layer[togglebutton].visible, false);</action>
  <action name="showtogglebutton">if(tour_displaycontrols,set(layer[togglebutton].visible, true);,hidetogglebutton(););</action>

<layer name="togglebuttonTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#c8c8c8;font-family:Acrom;font-weight:bold;font-size:10px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	edge="bottom"
/>

<!-- ********** -->
<!-- Hide controls -->
<!-- id : togglebutton1 -->
<!-- ********** -->



  <layer name="togglebutton1"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton1/photo.png" 
         align="bottom"
         x="0"
         y="10"
         zorder="6"
         tooltip=""
         onhover="togglebutton1OnHover"
         state="true"
         onclick="togglebutton1OnClick"
         alpha="0.7"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         height="32"
         width="32"
         visible="false"
         />

  <action name="togglebutton1OnHover">
    if (state,
      set(tooltip, togglebutton1firsttooltip);
     ,
      set(tooltip, togglebutton1secondtooltip);
    );
    if (tooltip != "", showTooltip('plugin',togglebutton1TooltipStyle););
  </action>
  <action name="togglebutton1OnClick">
    if (state,
      set(state, false);hideTourControls();


      set(url,%FIRSTXML%/graphics/togglebutton1/_109110842.png);
     ,
      set(state, true);showTourControls();


      set(url,%FIRSTXML%/graphics/togglebutton1/photo.png);
    );
  </action>

  <events name="togglebutton1events" 
    onTourStart="showtogglebutton1();"
    keep="true" />
  <action name="hidetogglebutton1">set(layer[togglebutton1].visible, false);</action>
  <action name="showtogglebutton1">set(layer[togglebutton1].visible, true);</action>

<layer name="togglebutton1TooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#c8c8c8;font-family:Acrom;font-weight:bold;font-size:10px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	edge="bottom"
/>

<!-- ********** -->
<!-- Moving -->
<!-- id : togglebutton2 -->
<!-- ********** -->



  <layer name="togglebutton2"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton2/_108510861087_1072_10881091_1072.png" 
         align="bottom"
         x="-42"
         y="10"
         zorder="7"
         tooltip=""
         onhover="togglebutton2OnHover"
         state="true"
         onclick="togglebutton2OnClick"
         alpha="0.7"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         height="32"
         width="32"
         visible="false"
         />

  <action name="togglebutton2OnHover">
    if (state,
      set(tooltip, togglebutton2firsttooltip);
     ,
      set(tooltip, togglebutton2secondtooltip);
    );
    if (tooltip != "", showTooltip('plugin',togglebutton2TooltipStyle););
  </action>
  <action name="togglebutton2OnClick">
    if (state,
      set(state, false);setControlModeDragTo();


      set(url,%FIRSTXML%/graphics/togglebutton2/_10901088107710831086109510821072_1088109110821072.png);
     ,
      set(state, true);setControlModeMoveTo();


      set(url,%FIRSTXML%/graphics/togglebutton2/_108510861087_1072_10881091_1072.png);
    );
  </action>

  <events name="togglebutton2events" 
    onTourStart="showtogglebutton2();"
    hidetourcontrols="hidetogglebutton2();" 
    showtourcontrols="showtogglebutton2();" 
    keep="true" />
  <action name="hidetogglebutton2">set(layer[togglebutton2].visible, false);</action>
  <action name="showtogglebutton2">if(tour_displaycontrols,set(layer[togglebutton2].visible, true);,hidetogglebutton2(););</action>

<layer name="togglebutton2TooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#c8c8c8;font-family:Acrom;font-weight:bold;font-size:10px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	edge="bottom"
/>

<!-- ********** -->
<!-- Fullscreen -->
<!-- id : togglebutton3 -->
<!-- ********** -->



  <layer name="togglebutton3"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton3/_108510861087_10722_1.png" 
         align="bottom"
         x="126"
         y="10"
         zorder="8"
         tooltip=""
         onhover="togglebutton3OnHover"
         state="true"
         onclick="togglebutton3OnClick"
         alpha="0.7"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         height="32"
         width="32"
         visible="false"
         />

  <action name="togglebutton3OnHover">
    if (state,
      set(tooltip, togglebutton3firsttooltip);
     ,
      set(tooltip, togglebutton3secondtooltip);
    );
    if (tooltip != "", showTooltip('plugin',togglebutton3TooltipStyle););
  </action>
  <action name="togglebutton3OnClick">
    if (state,
      set(state, false);enterFullscreen();


      set(url,%FIRSTXML%/graphics/togglebutton3/_10911083108310891082108810801085_2.png);
     ,
      set(state, true);exitFullscreen();


      set(url,%FIRSTXML%/graphics/togglebutton3/_108510861087_10722_1.png);
    );
  </action>

  <events name="togglebutton3events" 
    onTourStart="showtogglebutton3();"
    hidetourcontrols="hidetogglebutton3();" 
    showtourcontrols="showtogglebutton3();" 
    keep="true" />
  <action name="hidetogglebutton3">set(layer[togglebutton3].visible, false);</action>
  <action name="showtogglebutton3">if(tour_displaycontrols,set(layer[togglebutton3].visible, true);,hidetogglebutton3(););</action>

<layer name="togglebutton3TooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#c8c8c8;font-family:Acrom;font-weight:bold;font-size:10px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	edge="bottom"
/>

<!-- ********** -->
<!-- Zoom in -->
<!-- id : button1 -->
<!-- ********** -->

  <layer name="button1"
         keep="true"
         url="%FIRSTXML%/graphics/button1/_108311021089.png" 
         align="bottom"
         x="-126"
         y="10"
         zorder="9"
         visible="false"
         onclick="button1OnClick"
         alpha="0.7"
         tooltip="button1tooltip"
         onhover="showTooltip('plugin',button1TooltipStyle);"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="32"
         width="32"
         />
  <action name="button1OnClick">viewControlZoomIn(true);

  </action>

  <events name="button1events" 
    onTourStart="showbutton1();"
    hidetourcontrols="hidebutton1();" 
    showtourcontrols="showbutton1();" 
    keep="true" />
  <action name="hidebutton1">set(layer[button1].visible, false);</action>
  <action name="showbutton1">if(tour_displaycontrols,set(layer[button1].visible, true);,hidebutton1(););</action>

<layer name="button1TooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#c8c8c8;font-family:Acrom;font-weight:bold;font-size:10px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	edge="bottom"
/>

<!-- ********** -->
<!-- Zoom out -->
<!-- id : button2 -->
<!-- ********** -->

  <layer name="button2"
         keep="true"
         url="%FIRSTXML%/graphics/button2/_1080108510911089.png" 
         align="bottom"
         x="-84"
         y="10"
         zorder="10"
         visible="false"
         onclick="button2OnClick"
         alpha="0.7"
         tooltip="button2tooltip"
         onhover="showTooltip('plugin',button2TooltipStyle);"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="32"
         width="32"
         />
  <action name="button2OnClick">viewControlZoomOut(true);


  </action>

  <events name="button2events" 
    onTourStart="showbutton2();"
    hidetourcontrols="hidebutton2();" 
    showtourcontrols="showbutton2();" 
    keep="true" />
  <action name="hidebutton2">set(layer[button2].visible, false);</action>
  <action name="showbutton2">if(tour_displaycontrols,set(layer[button2].visible, true);,hidebutton2(););</action>

<layer name="button2TooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#c8c8c8;font-family:Acrom;font-weight:bold;font-size:10px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	edge="bottom"
/>

<!-- ********** -->
<!-- Home -->
<!-- id : button3 -->
<!-- ********** -->

  <layer name="button3"
         keep="true"
         url="%FIRSTXML%/graphics/button3/_10861084.png" 
         align="bottom"
         x="42"
         y="10"
         zorder="11"
         visible="false"
         onclick="button3OnClick"
         alpha="0.7"
         tooltip="button3tooltip"
         onhover="showTooltip('plugin',button3TooltipStyle);"
         onout="hideTooltip();tween(alpha,0.7,0.5,easeOutQuad);"
         onover="tween(alpha,1.0,0.5,easeOutQuad);"
         height="32"
         width="32"
         />
  <action name="button3OnClick">hideFloorplan();

displayImage(%FIRSTXML%/graphics/button3/_1072108910901072107410821072.png
             ,center,0,0
             ,1920
             ,1080

             ,true
             ,false
             ,true
             ,true
             ,3c3c3c
             ,1);
            mainloadscene(get(panoramagroup[panogroup11].mainscene));lookat(3.200000, -24.950000, 90.000000);


  </action>

  <events name="button3events" 
    onTourStart="showbutton3();"
    hidetourcontrols="hidebutton3();" 
    showtourcontrols="showbutton3();" 
    keep="true" />
  <action name="hidebutton3">set(layer[button3].visible, false);</action>
  <action name="showbutton3">if(tour_displaycontrols,set(layer[button3].visible, true);,hidebutton3(););</action>

<layer name="button3TooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#c8c8c8;font-family:Acrom;font-weight:bold;font-size:10px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	edge="bottom"
/>

<!-- ********** -->
<!-- Loading Information -->
<!-- id : loaderinfo -->
<!-- ********** -->

  <events name="loaderinfoevent" onxmlcomplete="loaderinfoupdate();" keep="true"/>

  <action name="loaderinfoupdate">
    if(scene[get(xml.scene)].video,
      set(layer[loaderinfotextfield].visible, false);
    ,
      if (progress.progress == 1,
        delayedcall(0.5, set(layer[loaderinfotextfield].visible, false); );
      ,
        set(layer[loaderinfotextfield].visible, true);
      );
      mul(progresstext, get(progress.progress),100);
      roundval(progresstext);
      txtadd(progresstext, get(progresstext), %);
      set(layer[loaderinfotextfield].html, get(progresstext));
      ifnot(progress.progress GE 1, delayedcall(0.01, loaderinfoupdate() ));
    );
  </action>

  <layer name="loaderinfotextfield"
         keep="true"
         zorder="12"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="bottomright"
         x="0"
         y="0"
         borderwidth="0"
         background="false"
         autoheight="true"
         autowidth="auto"
         capture="false"
         handcursor="false"
         selectable="false"
         alpha="1"
         visible="true"
         css="
         text-align:right;
         color:#c8c8c8;
         font-family:Acrom;
         font-weight:bold;
         font-size:12px;
         "
  />

<action name="setViewLittlePlanet">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewLittlePlanetComplete();
	);
</action>

<action name="setViewLittlePlanetComplete">
	set(backtonormalfirst,false);
	if(view.pannini GE 1.0, set(backtonormalfirst,true));
	if(view.stereographic == false, set(backtonormalfirst,true));
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	set(view.stereographic, true);
	set(view.fisheyefovlink, 1.5);
	tween(view.architectural, 0.0, 0.25);
	tween(view.vlookat, 90, distance(179, 1.50));
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.fov, 150, distance(179, 0.75));
</action>

<action name="setViewNormal">
	stopSetViewTweens();
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	set(view.fisheyefovlink, 0.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
	tween(view.fisheye, 0.0, distance(1.0, 0.45),
		set(view.stereographic,false);
	);
</action>

<krpano normalViewActivated="true" />
<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
	stoptween(view.pannini);
</action>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <action name="displayImage">
    if (layer[displayedStandardImage],
      if(layer[displayedStandardImage].doNotDeleteMe,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, false);
        
        if (%1 == layer[displayedStandardImage].url,
          applyDisplayedImageObjectAnimation(%8);
        ,
          setDisplayedImageObjectParameters(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10);
        );
      ,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, true);
        events.dispatch(onremovedisplayedobject);
        delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      );
    ,
      if(%10,
        addlayer(displayedStandardImageOverlay);
        set(layer[displayedStandardImageOverlay].keep, false);
        set(layer[displayedStandardImageOverlay].width, 100%);
        set(layer[displayedStandardImageOverlay].height, 100%);
        set(layer[displayedStandardImageOverlay].type, container);
        set(layer[displayedStandardImageOverlay].zorder, 98);
        set(layer[displayedStandardImageOverlay].visible, false);
        set(layer[displayedStandardImageOverlay].onclick, applyDisplayedImageObjectAnimation(%8););
        set(layer[displayedStandardImageOverlay].bgcolor, "0x%11");
        set(layer[displayedStandardImageOverlay].bgalpha, %12);
        set(layer[displayedStandardImageOverlay].bgcapture, true);
      );
      addlayer(displayedStandardImage);
      set(layer[displayedStandardImage].keep, false);
      set(layer[displayedStandardImage].onclick, applyDisplayedImageObjectAnimation(%8););
      set(layer[displayedStandardImage].zorder , 99);
      set(layer[displayedStandardImage].currentCall, true);
      set(layer[displayedStandardImage].doNotDeleteMe, true);
      set(layer[displayedStandardImage].onloaded, resizeDisplayedImageObject());
      events.dispatch(onremovedisplayedobject);
      delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      set(layer[displayedStandardImage].visible, false);
    );
  </action>
  <action name="applyDisplayedImageObjectAnimation">resumeautorotation(forcehotspot);

    if (%1,
      stoptween(layer[displayedStandardImage].width, layer[displayedStandardImage].height);
      tween(layer[displayedStandardImage].width|layer[displayedStandardImage].height, 1|1, 1, easeOutQuad, WAIT);
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    ,
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    );
  </action>
  <action name="setDisplayedImageObjectParameters">
    set(layer[displayedStandardImage].url       , %1);
    set(layer[displayedStandardImage].align     , %2);
    set(layer[displayedStandardImage].x         , %3);
    set(layer[displayedStandardImage].y         , %4);
    set(layer[displayedStandardImage].imgwidth  , %5);
    set(layer[displayedStandardImage].imgheight , %6);
    set(layer[displayedStandardImage].animated  , %8);
    set(layer[displayedStandardImage].applyratio, %9);
    set(layer[displayedStandardImage].overlay   , %10);
    if (%7,pauseautorotation(forcehotspot);
);
  </action>
  <action name="resizeDisplayedImageObject">
    if(layer[displayedStandardImage].url,
    set(layer[displayedStandardImage].fullwidth, get(layer[displayedStandardImage].width));
    set(layer[displayedStandardImage].fullheight, get(layer[displayedStandardImage].height));
    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].width , 1);
      set(layer[displayedStandardImage].height, 1);
    );
    if(layer[displayedStandardImage].imgwidth != "" AND layer[displayedStandardImage].imgheight != "",
      if(layer[displayedStandardImage].imgwidth == "prop",
        set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
        indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
        if(tempDisplayedImageObjectHeightPercent GT 0,
          txtreplace(tempDisplayedImageObjectHeight, '%', '');
          mul(tempDisplayedImageObjectHeight, get(stageheight));
          div(tempDisplayedImageObjectHeight, 100);
          Math.round(tempDisplayedImageObjectHeight);
        );
        mul(flyingImgWidth,get(layer[displayedStandardImage].fullwidth),get(tempDisplayedImageObjectHeight));
        div(flyingImgWidth,get(layer[displayedStandardImage].fullheight));
        Math.round(flyingImgWidth);
        set(layer[displayedStandardImage].imgwidth , get(flyingImgWidth));
        set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
      ,
        if(layer[displayedStandardImage].imgheight == "prop",
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          mul(flyingImgHeight,get(layer[displayedStandardImage].fullheight),get(tempDisplayedImageObjectWidth));
          div(flyingImgHeight,get(layer[displayedStandardImage].fullwidth));
          Math.round(flyingImgHeight);
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight , get(flyingImgHeight));
        ,
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          if(tempDisplayedImageObjectHeightPercent GT 0,
            txtreplace(tempDisplayedImageObjectHeight, '%', '');
            mul(tempDisplayedImageObjectHeight, get(stageheight));
            div(tempDisplayedImageObjectHeight, 100);
            Math.round(tempDisplayedImageObjectHeight);
          );
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
        );
      );
    ,
      set(layer[displayedStandardImage].imgwidth , get(layer[displayedStandardImage].fullwidth));
      set(layer[displayedStandardImage].imgheight, get(layer[displayedStandardImage].fullheight));
    );
    
    set(resizedwidth, get(layer[displayedStandardImage].imgwidth));
    set(resizedheight, get(layer[displayedStandardImage].imgheight));
    if(layer[displayedStandardImage].applyratio,
      sub(resizedstagewidth, get(stagewidth), get(layer[displayedStandardImage].x));
      sub(resizedstageheight, get(stageheight), get(layer[displayedStandardImage].y));
      Math.abs(resizedstagewidth);
      Math.abs(resizedstageheight);
      if(resizedwidth GT resizedstagewidth,
        mul(tempresizedheight, get(resizedheight), get(resizedstagewidth));
        div(tempresizedheight, get(resizedwidth));
        Math.round(tempresizedheight);
        set(resizedwidth, get(resizedstagewidth));
        set(resizedheight, get(tempresizedheight));
      );
      if(resizedheight GT resizedstageheight,
        mul(tempresizedwidth, get(resizedwidth), get(resizedstageheight));
        div(tempresizedwidth, get(resizedheight));
        Math.round(tempresizedwidth);
        set(resizedheight, get(resizedstageheight));
        set(resizedwidth, get(tempresizedwidth));
      );
    );
    
    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].animated, false);
      tween(layer[displayedStandardImage].width , get(resizedwidth), 1, easeOutQuad);
      tween(layer[displayedStandardImage].height, get(resizedheight), 1, easeOutQuad);
    ,
      set(layer[displayedStandardImage].width , get(resizedwidth));
      set(layer[displayedStandardImage].height, get(resizedheight));
    );
    if(layer[displayedStandardImage].overlay,set(layer[displayedStandardImageOverlay].visible, true););
    set(layer[displayedStandardImage].visible, true);
    ,
      delayedcall(0.2,resizeDisplayedImageObject(););
    );
  </action>
  <events name="displayedImageObjectEvents" keep="true" onremovedisplayedobject="displayedImageObjectOnRemoveDisplayedObject" onresize="if(layer[displayedStandardImage],resizeDisplayedImageObject());" />
  <action name="displayedImageObjectOnRemoveDisplayedObject">
    ifnot(layer[displayedStandardImage].currentCall,if(layer[displayedStandardImage].visible,resumeautorotation(forcehotspot);

      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););
      removelayer(displayedStandardImage);
    ););
  </action>


<action name="setViewArchitectural">
	if(normalViewActivated,stopSetViewTweens(););
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	set(view.fovmax, get(panoview.fovmax));
	set(view.fisheyefovlink, 0.5);
	tween(view.architectural, 1.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fisheye, 0.0, distance(1.0, 0.45), easeOutQuad, 
		set(view.stereographic,false);
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
</action>

  <!-- FLOORPLAN -->
  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

</krpano>